# This github workflow called fedramp-native-helm-mtservice-deployment deploys given mtservice
## version/tag in input namespace of input cluster
## Note : mtservice helm chart must have `zeus-values-override.yaml` as value override file

## Assumption 
# https://docs.github.com/en/enterprise-cloud@latest/actions/learn-github-actions/variables#creating-configuration-variables-for-an-organization
# Configuration variable `FEDRAMP_ZEUS_CLUSTER_NAME` containing zeus cluster name (for-ex FEDRAMP_ZEUS_CLUSTER_NAME=fipstest-enterprise-use1) should exist on GHES


####  Detailed flow
## Derive cluster region from configuration variable `FEDRAMP_ZEUS_CLUSTER_NAME` & fetch clusterlabels for fedramp cluster from aws secret manager
## Form clusterlabels.yaml with appropriate hierarchies from cluster labels
## Derive rendered service override values file (`zeus-values-override.yaml`) referring clusterlabels.yaml
## Helm upgrade/install service helm chart using rendered override values file (`zeus-values-override.yaml`)

# inputs :
## service_name
## service_version
## service_defaultnamespace

name: "Fedramp Deployment mtservice"
run-name: "Fedramp Deploy [${{ inputs.service_name }}] version [${{ inputs.service_version }}] in namespace [${{ inputs.service_defaultnamespace }}] on zeus cluster [${{ vars.FEDRAMP_ZEUS_CLUSTER_NAME }}]"

on:
  workflow_dispatch:
    inputs:
        service_name:
            required: true
            type: choice
            options:
                    - acm
                    - airflow-pipeline-service
                    - alation-iam
                    - alation-ui
                    - catalog
                    - cloud-control-plane
                    - configuration-service
                    - delphi
                    - logical-metadata-service
                    - ots
                    - scytale
                    - s3auth
                    - techops-portal
                    - tenant-onboarding
                    - tenant-resource-catalog
                    - tms
                    - token-vending-machine
            description: Service name
        service_version:
            required: true
            type: string
            description: Service version
        service_defaultnamespace:
            required: true
            type: string
            default: alation-default
            description: Service default namespace. s3auth in airflow ns, techops-portal in techops-tools ns, acm and cloud-control-plane in default ns , all other mtservices in alation-default ns.

permissions:
  contents: read
  id-token: write
  pull-requests: write
  checks: write


jobs:


  # Deriving secondray helm ecr repo list for given mtservice by parsing `mtservice_extra_ecr_promotion_matrix/info.json`
  derive_secondary_helm_ecrs:
    # Runs on self hosted k8 runner pod of given cluster
    ## self hosted k8 github runner pod are deployed as rafay addons
    runs-on: ubuntu-latest
    outputs:
      secondaryhelmrepos: ${{ steps.extra_helm_ecrs.outputs.secondaryhelmrepos }}
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Fetch extra helm ecr repos from mtservice_extra_ecr_promotion_matrix/info.json
      shell: bash
      id: extra_helm_ecrs
      run: |
        # Declare indexed array in shell script
        declare -a extra_helm_ecrs
        if [ `jq -r '.'\"${{ inputs.service_name }}\"'.'\"helm\"' | length' mtservice_extra_ecr_promotion_matrix/info.json` -gt 0 ]; then
            echo "mtservice (${{ inputs.service_name }}) has some extra helm ECR repos to be considered for promotion"
            extra_helm_ecrs=`jq -r '.'\"${{ inputs.service_name }}\"'.'\"helm\"' | @json' mtservice_extra_ecr_promotion_matrix/info.json`

            echo "List of ecr repos for mtservice (${{ inputs.service_name }}) from which helm charts to be promoted are $extra_helm_ecrs"
        fi
        echo "secondaryhelmrepos=$extra_helm_ecrs" >> $GITHUB_OUTPUT

        echo "Printing list of secondaryhelmrepos"
        echo $extra_helm_ecrs

    - name: testing output value if empty
      if: steps.extra_helm_ecrs.outputs.secondaryhelmrepos == ''
      run: |
        echo "printing json values"
        echo ${{ fromJSON(steps.extra_helm_ecrs.outputs.secondaryhelmrepos) }}
        

    - name: testing output value NOT empty
      if: steps.extra_helm_ecrs.outputs.secondaryhelmrepos != ''
      run: |
        echo "printing json values"
        echo ${{ fromJSON(steps.extra_helm_ecrs.outputs.secondaryhelmrepos) }}     

# Promoting secondray helm ecr repo list for given mtservice
  promote_secondary_helm_repos:
    needs: derive_secondary_helm_ecrs
    if: needs.derive_secondary_helm_ecrs.outputs.secondaryhelmrepos != ''
    strategy:
      fail-fast: false
      matrix:
        repo_name: ${{ fromJSON(needs.derive_secondary_helm_ecrs.outputs.secondaryhelmrepos) }}
    runs-on: ubuntu-latest
    steps:

    - name: Printing information
      run: |
        echo "repo_name --> ${{ matrix.repo_name }}"
        echo "repo_type --> helm"
        echo "tag_name --> ${{ inputs.service_version }}"



  # Deriving secondray docker ecr repo list for given mtservice by parsing `mtservice_extra_ecr_promotion_matrix/info.json`
  derive_secondary_docker_ecrs:
    # Runs on self hosted k8 runner pod of given cluster
    ## self hosted k8 github runner pod are deployed as rafay addons
    runs-on: ubuntu-latest
    outputs:
      secondarydockerrepos: ${{ steps.docker_ecrs.outputs.secondarydockerrepos }}
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Fetch extra docker ecr repos from mtservice_extra_ecr_promotion_matrix/info.json
      shell: bash
      id: docker_ecrs
      run: |
        declare -a extra_docker_ecrs
        if [ `jq -r '.'\"${{ inputs.service_name }}\"'.'\"docker\"' | length' mtservice_extra_ecr_promotion_matrix/info.json` -gt 0 ]; then
            echo "mtservice (${{ inputs.service_name }}) has some extra docker ECR repos to be considered for promotion"
            extra_docker_ecrs=`jq -r '.'\"${{ inputs.service_name }}\"'.'\"docker\"' | @json' mtservice_extra_ecr_promotion_matrix/info.json`
            echo "List of ecr repos for mtservice (${{ inputs.service_name }}) from which helm charts to be promoted are $extra_docker_ecrs"
        fi
        echo "secondarydockerrepos=$extra_docker_ecrs" >> "$GITHUB_OUTPUT"

        echo "Printing list of secondarydockerrepos"
        echo $extra_docker_ecrs

    - name: testing output value if empty
      if: steps.docker_ecrs.outputs.secondarydockerrepos == ''
      run: |
        echo "printing json values"
        

    - name: testing output value NOT empty
      if: steps.docker_ecrs.outputs.secondarydockerrepos != ''
      run: |
        echo "printing json values"
        

# Promoting secondray helm ecr repo list for given mtservice
  promote_secondary_docker_repos:
    needs: derive_secondary_docker_ecrs
    if: needs.derive_secondary_docker_ecrs.outputs.secondarydockerrepos != ''
    strategy:
      fail-fast: false
      matrix:
        repo_name: ${{ fromJSON(needs.derive_secondary_docker_ecrs.outputs.secondarydockerrepos) }}
    runs-on: ubuntu-latest
    steps:

    - name: Printing information
      run: |
        echo "repo_name --> ${{ matrix.repo_name }}"
        echo "repo_type --> helm"
        tag_name=${{ contains(matrix.repo_name, 'ocf-system/') &&  format('{0}.{1}', inputs.service_version, 'fips') || inputs.service_version }}
        echo "tag_name --> $tag_name"
